{
  "name": "api-chain",
  "version": "0.0.4",
  "description": "A light and easy to use interface for creating fluent, chainable javascript APIs in Node.js or PhantomJs",
  "main": "api-chain.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fshost/api-chain.git"
  },
  "keywords": [
    "javascript",
    "api",
    "chain",
    "chainable",
    "promises",
    "deferreds",
    "Node.js",
    "PhantomJs"
  ],
  "author": {
    "name": "Nathan Cartwright"
  },
  "license": "MIT",
  "readmeFilename": "readme.md",
  "readme": "## api-chain\n---\nWhen performing many asynchronous operations in javascript, nested callbacks can become difficult to read and maintain.  Api-chain is a very light and easy to use interface for creating a fluent synchronous style API for control flow of asynchronous javascript.  It is packaged as a commonJS module through NPM but not only works with Node.js, but has been tested and works with PhantomJS as well.\n\n### installation\n    npm install api-chain\n\n### example\n    // require api-chain module\n    var api = require('api-chain');\n\n    // define your api by passing custom methods to `create\n    var myApi = api.create({\n        get: function (url, next) {\n            console.log('getting page at', url);\n            // simulate async operation\n            setTimeout(function () {\n                myApi.page = '<div>test</div>';\n                next();\n            }, 1000)\n        },\n        done: function (msg) {\n            console.log('the page contains:', this.page);\n        }\n    });\n\n    // example using 'myApi'\n    myApi\n        .get('http://nopage.fake')\n        .done();\n\nFor more examples look in the examples subdirectory.\n\n### options\n| name           | type | default     | description                                                     |\n|:---------------|:-----|:------------|:----------------------------------------------------------------|\n| onError        | fn   | undefined   | called when error is emitted unless error method is overwritten |\n| throwErrors    | bool | true        | whether to throw unhandled errors (ignored if onError exists)   |\n| continueErrors | bool | false       | whether to resume execution of commands after errors occur      |  \n\n### built in chainable methods\n***api*.wait(n)** - pause execution flow for *n* milliseconds\n\n***api*.until(fn)** - wait until callback *fn* returns true before continuing execution flow\n\n***api*.chain(fn)** - add callback **fn** to be executed next in the control flow stack.\n- callback signature: **fn([arg1,] [arg2,] ... [arg *n*,] [next])**\n\n***api*.set(name, value, [immediate])** - set api object property *name* to *value*\n- if the *immediate* flag is set, the value will be set immediately rather than within the control flow\n\n### immediate methods\n###### The following methods execute immediately (rather than within the control flow) and always return the api object \n***api*.setOption(option, value)** - set *option* to *value*\n\n***api*.setOptions(options)** - set several options at once based on *options* collection of key/value pairs\n\n### testing\nto test you will need mocha and chai installed.  Then just cd to the directory api-chain is installed in and type\n\n    mocha\n\n### license\nMIT Style License - see license.txt\n",
  "_id": "api-chain@0.0.4",
  "_from": "api-chain@"
}
